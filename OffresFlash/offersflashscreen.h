#ifndef OFFRESFLASHSCREEN_H
#define OFFRESFLASHSCREEN_H

#include <QWidget>
#include <QList>
#include <QDateTime>
#include <QtSql/QSqlDatabase>
#include <Qt> // Required for Qt::SortOrder

// --- Includes for UI and Functionality ---
#include "settingswidget.h"
#include "offeritemdelegate.h"
#include <QGraphicsDropShadowEffect>
#include <QButtonGroup>
#include "offerdata.h"
#include <QtNetwork/QNetworkAccessManager>
#include <QtNetwork/QNetworkReply>
#include <QJsonDocument>
#include <QJsonObject>
#include <QJsonArray>

// <<< --- ADDED INCLUDES for Kiosk Monitor --- >>>
#include "kioskmonitordialog.h" // Include the dialog header
#include <QtSerialPort/QSerialPort> // For serial port class
#include <QtSerialPort/QSerialPortInfo> // For listing serial ports
// <<< --- END ADDED INCLUDES --- >>>


// Forward declare the UI class generated by uic
namespace Ui {
class OffresFlashScreen;
}

// Forward declarations for other types used as pointers/parameters
class QListWidgetItem;
class QAction;
class QMenu;
class QAbstractButton;
class OfferItemDelegate;
struct OfferData;
class SettingsWidget;
class KioskMonitorDialog; // Forward declare the dialog class


/**
 * @brief The OffresFlashScreen class manages the UI for Flash Offers,
 * including sidebar navigation, embedded settings, and Kiosk monitoring. // Updated description
 */
class OffresFlashScreen : public QWidget
{
    Q_OBJECT // Macro required for signals/slots

public:
    explicit OffresFlashScreen(QWidget *parent = nullptr);
    ~OffresFlashScreen() override;

    // <<< --- ADDED SIGNALS section --- >>>
signals:
    // Signals to update the KioskMonitorDialog UI
    void serialStatusChanged(const QString &statusMessage, bool connected);
    void dbStatusChanged(const QString &statusMessage, bool connected);
    void newLogMessage(const QString &message);
    void newUidReceived(const QString &uid);
    // Signal to send all necessary info after processing UID
    void newUidProcessed(const QString &name, const QString &line1, const QString &line2);
    // <<< --- END SIGNALS section --- >>>


private slots: // Keep existing slots and add new ones needed
    // --- Slots for UI Elements (Offer Management Page) ---
    void onOfferSelectionChanged(QListWidgetItem *current, QListWidgetItem *previous);
    void onFormSubmitClicked();
    void onFormCancelClicked();
    void onModifierClicked();
    void onSupprimerClicked();
    void onConsulterClicked();
    void onFormShowListClicked();
    void onListShowFormClicked();
    void onFilterGroupButtonClicked(QAbstractButton *button);
    void onSearchTextChanged(const QString &text);
    void onSortCriteriaChanged(int index);
    void onViewClaimsClicked();
    void onValidateOfferClicked();
    void onRejectOfferClicked();

    // --- Slots for AI Suggestions ---
    void onGenerateSuggestionsClicked();
    void onSuggestDescriptionClicked();
    void onGeminiDescriptionReplyFinished(QNetworkReply *reply);

    // --- Slots for Top-Right Menu Actions ---
    void onLogoutActionTriggered();
    void onQuitTriggered();

    // --- Slots for Sidebar Navigation Buttons ---
    void onSidebarOffersClicked();
    void onSidebarStatsClicked();
    void onSidebarSettingsClicked();
    void onSidebarExportClicked();
    void onSidebarAboutClicked();
    // This slot now opens the Kiosk Monitor Dialog
    void onQrCodeGeneratorClicked(); // Keep name or rename if button object name changed

    // --- Slots for Actions called by Sidebar Buttons ---
    void onExportExcelTriggered();
    void onAboutActionTriggered();

    // --- Slots to handle requests from SettingsWidget ---
    void handleApiKeyTestRequest(const QString &apiKey);
    void handleDatabaseTestRequest(const QString &dsn, const QString &user, const QString &password);

    // <<< --- ADDED SLOT for Serial Port --- >>>
    void readSerialData(); // Slot to handle data arriving from Arduino


private:
    // --- Member Variables ---
    Ui::OffresFlashScreen *ui;
    QNetworkAccessManager *m_networkManager;
    QSqlDatabase m_database;
    // --- Menu items ---
    QMenu *m_mainMenu;
    QAction *m_actionLogout;
    QAction *m_actionQuit;
    // --- UI Helpers / Data ---
    OfferItemDelegate *m_offerDelegate;
    QButtonGroup *m_filterButtonGroup;
    QButtonGroup *m_sidebarButtonGroup;
    QList<OfferData> m_offerList;
    // --- State Variables ---
    bool m_isEditMode;
    int m_editingOfferId;
    QString m_currentStatusFilter;
    // --- Sorting State Variables ---
    enum SortColumn { ByDate, ByDescription };
    SortColumn m_currentSortColumn;
    Qt::SortOrder m_currentSortOrder;
    // --- Embedded Widgets ---
    SettingsWidget *m_settingsWidgetInstance;

    // <<< --- ADDED Member Variables for Kiosk Monitor --- >>>
    KioskMonitorDialog *m_kioskMonitorDialog; // Pointer to the dialog instance
    QSerialPort *m_arduinoSerialPort;         // Pointer to the serial port object
    QString m_partialDataBuffer;              // Buffer for incoming serial data
    // <<< --- END ADDED Member Variables --- >>>

    // --- Helper Functions ---
    // Initialization and Setup
    bool initializeDatabaseConnection();
    void setupConnections();
    void setupOfferListDelegate();
    void setupFilterButtonGroup();
    void setupSidebarButtonGroup();
    // void createMainMenu(); // Seems menu is created directly in constructor now
    void applyGraphicalEffects();

    // Data Handling
    void loadInitialData();
    void loadStoresIntoComboBox();
    void loadArticlesIntoComboBox();
    void refreshOfferList();
    void sortOfferList();
    QList<OfferData> generateStockBasedSuggestions(); // Keep this

    // UI State Management
    void resetFormState();
    void updateSummaryBoxes();
    void updateFilterTabStyles();

    // <<< --- ADDED Helper Function Declarations --- >>>
    void setupSerialPort(); // Initializes and opens the serial port
    void processUid(const QString &uid); // Queries DB based on UID, emits signals/sends response
    void sendToArduino(const QString &message); // Sends formatted message to Arduino
    void logMessage(const QString &message); // Logs messages and emits signal
    // <<< --- END ADDED Helper Function Declarations --- >>>

};

#endif // OFFRESFLASHSCREEN_H
